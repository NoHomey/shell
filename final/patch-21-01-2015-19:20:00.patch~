diff --git a/final/shell.c b/final/shell.c
index 9ed2628..c43095f 100644
--- a/final/shell.c
+++ b/final/shell.c
@@ -102,7 +102,7 @@ void exec (char **args);
 //----------------------------------------------
 int  main (void)
 {
-	int size = 9, index = 0,file_flag = 0, flag = 0;	//Define size,file_flag, flag and index and inicializate them with their starting values.
+	int holder, size = 9, index = 0,file_flag = 0, flag = 0;	//Define holder, size, file_flag, flag and index and inicializate them with their starting values.
         char **args, *command_line = malloc(size * sizeof(char *)), byte;	//Define args, command_line and byte and alocate memory for command_line.
        	while((byte = getchar()) != EOF)	//Lopp while end of file of stdin isn't reached and read it byte by byte.
 	{	
@@ -121,7 +121,16 @@ int  main (void)
 				flag = 1;	//Set flag.				
 			if((byte == '\n') && (flag == 1))	//If read byte is new line and flag is 1 than terminate futer string, pass buffered memmory for parsing it, try to execute command from that string and reset index in order to start fresh if there are more command lines. 
 			{
-				command_line[index] = '\0';	//Terminate futer string.
+				holder = index;
+				index = holder - 2;
+				while(command_line[index] == ' ')
+				{
+					command_line[index] = '\n';
+					holder = index + 1;
+					index--;
+				}
+
+				command_line[holder] = '\0';	//Terminate futer string.
 				args = parse_cmdline(command_line);	//Parse that string.
 				exec(args);	//Execute the command line.
 				for(index = 0;index < get_argument_counter(command_line);index++) //Free all memory used by args, since it's no longer needed.
